{"version":3,"sources":["components/Background.js","components/Card.js","components/OpponentsHand.js","components/Centerdeck.js","components/YourHand.js","components/Game.js","App.js","serviceWorker.js","index.js"],"names":["Background","className","Card","props","src","image","OpponentsHand","cards","map","card","key","id","value","text","suit","Centerdeck","YourHand","Game","useState","setComputer","setPlayer","pile","setPile","playerHand","setPlayerHand","computerHand","setComputerHand","finishedShuffling","setfinishedShuffling","playerHandIntial","hand","i","push","shift","computerHandIntial","orderCards","sort","a","b","useEffect","shuffled","data","length","j","Math","floor","random","temp","shuffleData","console","log","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"igJAceA,MAXf,WACI,OACE,yBAAKC,UAAY,mBACf,6BACI,2CACA,2ECEGC,MARf,SAAcC,GACZ,OACE,yBAAKF,UAAU,UACb,+BAAO,yBAAKG,IAAKD,EAAME,W,MCgBdC,MAjBf,SAAuBH,GACnB,OACE,yBAAKF,UAAY,sCAEbE,EAAMI,MAAMC,KAAI,SAACC,GACf,OAAQ,kBAAC,EAAD,CAAMC,IAAOD,EAAKE,GACZN,MAAQ,gCACRO,MAASH,EAAKG,MACdC,KAAQJ,EAAKI,KACbC,KAAQL,EAAKK,Y,MCCxBC,MAVf,SAAoBZ,GAChB,OACE,yBAAKF,UAAU,aACf,yBAAKA,UAAY,yBACf,kBAAC,EAAD,CAAMI,MAAQ,qC,MCaPW,MAjBf,SAAkBb,GACd,OACE,yBAAKF,UAAY,iCAEbE,EAAMI,MAAMC,KAAI,SAACC,GACf,OAAQ,kBAAC,EAAD,CAAMC,IAAOD,EAAKE,GACZN,MAASI,EAAKJ,MACdO,MAASH,EAAKG,MACdC,KAAQJ,EAAKI,KACbC,KAAQL,EAAKK,Y,cCoJxBG,MA1Jf,WAAiB,IAAD,EACkBC,mBAAS,IAD3B,mBACGC,GADH,aAEcD,mBAAS,IAFvB,mBAECE,GAFD,aAGUF,mBAAS,IAHnB,mBAGPG,EAHO,KAGDC,EAHC,OAIsBJ,mBAAS,IAJ/B,mBAIPK,EAJO,KAIKC,EAJL,OAK0BN,mBAAS,IALnC,mBAKPO,EALO,KAKOC,EALP,OAMoCR,oBAAS,GAN7C,mBAMPS,EANO,KAMYC,EANZ,KAmCd,SAASC,IAGP,IAFA,IAAIC,EAAO,GAEFC,EAAI,EAAGA,EAAI,EAAGA,IACrBD,EAAKE,KAAKX,EAAKY,SAEjBT,EAAcM,GAWhB,SAASI,IAGP,IAFA,IAAIJ,EAAO,GAEFC,EAAI,EAAGA,EAAI,EAAGA,IACrBD,EAAKE,KAAKX,EAAKY,SAEjBP,EAAgBI,GAYlB,SAASK,IACPZ,EAAWa,MAAK,SAACC,EAAGC,GAAJ,OAAWD,EAAEzB,MAAQ0B,EAAE1B,MAAS,GAAK,KACrDa,EAAaW,MAAK,SAACC,EAAGC,GAAJ,OAAWD,EAAEzB,MAAQ0B,EAAE1B,MAAS,GAAK,KAuEzD,OAtIA2B,qBAAU,WACR,IAAMC,EAKR,SAAsBC,GACpB,IAAIV,EAAIU,EAAKC,OAAS,EACtB,KAAOX,EAAI,GAAG,CACZ,IAAMY,EAAIC,KAAKC,MAAMD,KAAKE,UAAYf,EAAI,IACpCgB,EAAON,EAAKV,GAClBU,EAAKV,GAAKU,EAAKE,GACfF,EAAKE,GAAKI,EACVhB,IAEF,OAAOU,EAdUO,CAAYP,GAC7BnB,EAAQkB,GACRZ,GAAqB,KACrB,IAeFW,qBAAU,WACJZ,GACFP,EAAUS,KAGZ,CAACF,IAYHY,qBAAU,WACJZ,GACFR,EAAYe,KAGd,CAACP,IAyBHsB,QAAQC,IAAIf,KACZc,QAAQC,IAAIf,KAoEV,6BACE,kBAAC,EAAD,MACA,kBAAC,EAAD,CAAe5B,MAAOkB,IACtB,kBAAC,EAAD,CAAYlB,MAAOc,IACnB,kBAAC,EAAD,CAAUd,MAAOgB,MC5IR4B,MARf,WACE,OACE,6BACE,kBAAC,EAAD,QCEcC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,MCXNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDwHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLpB,QAAQoB,MAAMA,EAAMC,c","file":"static/js/main.6b54d9a1.chunk.js","sourcesContent":["import React from \"react\";\r\nimport \"../styles/Background.css\";\r\n\r\nfunction Background() {\r\n    return (\r\n      <div className = \"backgroundTable\">\r\n        <div>\r\n            <h1>Go Fish !!!</h1>\r\n            <p>Objective: Collect the most pairs to win.</p>\r\n        </div>\r\n      </div>\r\n    )\r\n}\r\n\r\nexport default Background;","import React from \"react\";\r\n\r\nfunction Card(props) {\r\n  return (\r\n    <div className=\"col s2\">\r\n      <buton><img src={props.image}></img></buton>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Card;\r\n","import React from \"react\";\r\nimport Card from \"./Card\";\r\nimport \"../styles/OpponentsHand.css\";\r\n\r\nfunction OpponentsHand(props) {\r\n    return (\r\n      <div className = \"opponentsHand container row center\">\r\n        {\r\n          props.cards.map((card) => {\r\n            return (<Card key = {card.id} \r\n                          image = \"/assets/images/backs_blue.png\" \r\n                          value = {card.value} \r\n                          text = {card.text}\r\n                          suit = {card.suit}\r\n                    />)\r\n          })\r\n        }\r\n      </div>\r\n    )\r\n}\r\n\r\nexport default OpponentsHand;","import React from \"react\";\r\nimport Card from \"./Card\";\r\nimport \"../styles/Centerdeck.css\";\r\n\r\nfunction Centerdeck(props) {\r\n    return (\r\n      <div className=\"container\">\r\n      <div className = \"centerDeck row center\">\r\n        <Card image = \"/assets/images/backs_blue.png\" />\r\n      </div>\r\n      </div>\r\n    );\r\n}\r\n\r\nexport default Centerdeck;","import React from \"react\";\r\nimport Card from \"./Card\";\r\nimport \"../styles/YourHand.css\";\r\n\r\nfunction YourHand(props) {\r\n    return (\r\n      <div className = \"yourHand container row center\">\r\n        {\r\n          props.cards.map((card) => {\r\n            return (<Card key = {card.id} \r\n                          image = {card.image} \r\n                          value = {card.value} \r\n                          text = {card.text}\r\n                          suit = {card.suit}\r\n                    />)\r\n          })\r\n        }\r\n      </div>\r\n    )\r\n}\r\n\r\nexport default YourHand;","import React, { useState, useEffect } from \"react\";\r\nimport Background from \"./Background\";\r\nimport OpponentsHand from \"./OpponentsHand\";\r\nimport Centerdeck from \"./Centerdeck\";\r\nimport YourHand from \"./YourHand\";\r\nimport data from \"./data.json\";\r\n\r\nfunction Game() {\r\n  const [computer, setComputer] = useState(\"\");\r\n  const [player, setPlayer] = useState(\"\");\r\n  const [pile, setPile] = useState([]);\r\n  const [playerHand, setPlayerHand] = useState([]);\r\n  const [computerHand, setComputerHand] = useState([]);\r\n  const [finishedShuffling, setfinishedShuffling] = useState(false);\r\n  \r\n  /* initial shuffling */ \r\n  useEffect(() => {\r\n    const shuffled = shuffleData(data);\r\n    setPile(shuffled);\r\n    setfinishedShuffling(true);\r\n  },[]);\r\n\r\n  function shuffleData (data) {\r\n    let i = data.length - 1;\r\n    while (i > 0) {\r\n      const j = Math.floor(Math.random() * (i + 1));\r\n      const temp = data[i];\r\n      data[i] = data[j];\r\n      data[j] = temp;\r\n      i--;\r\n    }\r\n    return data;\r\n  };\r\n\r\n  /* initial deal to player1 */ \r\n  useEffect(() => {\r\n    if (finishedShuffling) {\r\n      setPlayer(playerHandIntial);\r\n      // console.log(player);\r\n    }\r\n  },[finishedShuffling]);\r\n\r\n  function playerHandIntial () {\r\n    let hand = [];\r\n    // console.log(pile);\r\n    for (var i = 0; i < 5; i++) {\r\n      hand.push(pile.shift());\r\n    }\r\n    setPlayerHand(hand);\r\n  };\r\n\r\n  /* initial deal to computer */ \r\n  useEffect(() => {\r\n    if (finishedShuffling) {\r\n      setComputer(computerHandIntial);\r\n      // console.log(computer);\r\n    }\r\n  },[finishedShuffling]);\r\n\r\n  function computerHandIntial () {\r\n    let hand = [];\r\n    // console.log(pile);\r\n    for (var i = 0; i < 5; i++) {\r\n      hand.push(pile.shift());\r\n    }\r\n    setComputerHand(hand);\r\n  };\r\n\r\n// console.log(player); /* undefined */ \r\n// console.log(computer); /* undefined */ \r\n\r\n// console.log(playerHand);\r\n// console.log(computerHand);\r\n\r\n// console.log(setPlayerHand); /* endless loop */ \r\n// console.log(setComputerHand); /* endless loop */\r\n\r\n  function orderCards () {\r\n    playerHand.sort((a, b) => (a.value > b.value) ? 1 : -1);\r\n    computerHand.sort((a, b) => (a.value > b.value) ? 1 : -1);\r\n  };\r\n\r\n  console.log(orderCards(playerHand));\r\n  console.log(orderCards(computerHand));\r\n\r\n  function removePairs () { /* checks for matches in hand, removes cards and adds to pair pile*/ \r\n\r\n  };\r\n\r\n  function deckAddition () { /* after go fish, pushes new card into hand */ \r\n\r\n  };\r\n\r\n  function playerRequest () { /* player picks card, asks computer for it */ \r\n\r\n  };\r\n\r\n  function computerRequest () { /* computer picks random card, asks player for it */ \r\n\r\n  };\r\n\r\n  function calculateWinner () { /* determines winner */ \r\n\r\n  };\r\n\r\n//   componentDidMount() {\r\n//     this.setState({ data: this.shuffleData(this.state.data) });\r\n//   }\r\n\r\n//   handleCorrectGuess = newData => {\r\n//     const { topScore, score } = this.state;\r\n//     const newScore = score + 1;\r\n//     const newTopScore = Math.max(newScore, topScore);\r\n\r\n//     this.setState({\r\n//       data: this.shuffleData(newData),\r\n//       score: newScore,\r\n//       topScore: newTopScore\r\n//     });\r\n//   };\r\n\r\n//   handleIncorrectGuess = data => {\r\n//     this.setState({\r\n//       data: this.resetData(data),\r\n//       score: 0\r\n//     });\r\n//   };\r\n\r\n//   resetData = data => {\r\n//     const resetData = data.map(item => ({ ...item, clicked: false }));\r\n//     return this.shuffleData(resetData);\r\n//   };\r\n\r\n//   handleItemClick = id => {\r\n//     let guessedCorrectly = false;\r\n//     const newData = this.state.data.map(item => {\r\n//       const newItem = { ...item };\r\n//       if (newItem.id === id) {\r\n//         if (!newItem.clicked) {\r\n//           newItem.clicked = true;\r\n//           guessedCorrectly = true;\r\n//         }\r\n//       }\r\n//       return newItem;\r\n//     });\r\n//     guessedCorrectly\r\n//       ? this.handleCorrectGuess(newData)\r\n//       : this.handleIncorrectGuess(newData);\r\n//   };\r\n\r\n  return (\r\n    <div>\r\n      <Background />\r\n      <OpponentsHand cards={computerHand}/>\r\n      <Centerdeck cards={pile}/>\r\n      <YourHand cards={playerHand}/> \r\n    </div>\r\n  );\r\n\r\n}\r\n\r\nexport default Game;\r\n","import React from 'react';\nimport Background from \"./components/Background\";\nimport OpponentsHand from \"./components/OpponentsHand\";\nimport Centerdeck from \"./components/Centerdeck\";\nimport YourHand from \"./components/YourHand\";\nimport Game from \"./components/Game\";\n\nfunction App() {\n  return (\n    <div>\n      <Game />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'materialize-css';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}